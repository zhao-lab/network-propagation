function delta=sagen(numsat,duration,model,saseed)
%SAGEN	Non-"Realtime" generation of Selective Availability error
%
%       delta = SAGEN(numsat,duration,model,saseed)
%
%   INPUTS
%       numsat = number of SA error traces (i.e., number of satellites
%               for which SA is to be generated)
%	duration = duration of error traces in seconds (must be an integer)
%                  (for model=4 or 5, duration must not be less than
%                   twenty minutes (1200 seconds) )
%       model = Optional model choice for generation of 
%               Selective Availability.  Default is: model = 3
%               1 = second-order Gauss-Markov model
%               2 = second-order Gauss-Markov with velocity error
%               3 = Autoregressive model
%               4 = Rater analytic model
%               5 = Rater analytic model with velocity and 
%                   acceleration errors
%	saseed = Optional seed for Gaussian random number generator.
%                Default setting is: saseed = sum(100*clock).
%
%   OUTPUTS
%	If model = 1, 3 or 4, delta is a matrix
%       of Selective Availability ranging error.  The columns in delta
%       are the 'duration'-number of seconds of range error corresponding
%       to the number of traces specified in saseed.
%       If model = 5, errors are generated as follows:  For the
%       satellite i, delta(:,3*i - 2) = range error in meters; 
%       delta(:,3*i - 1) = range-rate error in meters/second; 
%       delta(:,3*i) = acceleration error in meters/second-squared.
%       For model = 2, delta is similar except acceleration errors
%       are not generated.
%
%   NOTE:  All error traces are generated at a rate of 1 Hz.
%          It should also be noted that the SA errors generated by
%          each model start at zero and can take several hundred
%          seconds before reach nominal levels.

%	Reference: 
%                   Global Positioning System - Theory and Applications, 
%                   Volume I, B. Parkinson and J. Spilker, Jr., Senior
%                   Editors, Volume 163, Progress in Astronautics and
%                   Aeronautics, American Institute of Aeronautics and 
%                   Astronautics, Washington, D.C., 1996.
%
%	M. & S. Braasch 11-96
%	Copyright (c) 1996 by GPSoft
%	All Rights Reserved.
%
if nargin<4,randn('seed',sum(100*clock)),else,randn('seed',saseed);end
if nargin<3,model=3;end
if nargin<2,error('insufficient number of input arguments'),end

   % Second-Order Gauss-Markov Model
   if (model==1)|(model==2),
      phi=[0.9999284 0.9915387; -0.0001428 0.9831014];
      U=[0.0146771 0.0252060; 0 0.0504133];
      for k = 1:numsat,
         w=randn(2,1);
         xprev=U*w;
         for i = 1:duration,
             w=randn(2,1);
             x=phi*xprev + U*w;
             if model==1,
                delta(i,k)=x(1);
             else,
                delta(i,2*k - 1)=x(1);
                delta(i,2*k)=x(2);
             end
             xprev=x;
         end
      end
   end

   % Autoregressive Model
   if model==3,
      vare = 1.6993e-5;
      b(1) = 1;
      a(1) = 1;
      a(2) = -1.36192741558063;
      a(3) = -0.15866710938728;
      a(4) = +0.13545921610672;
      a(5) = +0.21501267664869;
      a(6) = +0.30061078095966;
      a(7) = -0.12390183286070;
      a(8) = +0.10063573000351;
      a(9) = +0.02694677520401;
      a(10)= -0.12898590228866;
      a(11)= +0.05083106570666;
      a(12)= -0.05600186282898;
      sigmae = sqrt(vare);
      for k = 1:numsat,
          x = sigmae*randn(duration,1);
          y = filter(b,a,x);
          delta(:,k) = y;
      end
   end,

   % Rater Analytic Model
   if (model==4)|(model==5),
      if duration<1200,duration=1200;end
      xddot0(1)=0.004; xddot0(2)=-xddot0(1);
      for k = 1:numsat,
         acc(1,1)=xddot0(1);acc(2,1)=xddot0(2);
         for i = 1:2,
            total=0;done=0;n=1;
            while ~done,
               T1 = round( 600*rand + 100 );
               tau1 = round( (T1/2)*rand );
               t=(T1-tau1)/2;
%%               A1 = (-xddot0(i)*(2*T1 + tau1))/(T1*(T1 + tau1));
               A1 = (-xddot0(i)*T1)/(t*(t + tau1));
               A(1)=A1; A(2)=0; A(3)=-A1;
               time(1) = round(t);
               time(2) = round(tau1);
               time(3) = time(1);
               rngo=0;velo=0;acco=xddot0(i);
               for j = 1:3,
                   for m = 1:time(j),
                      n=n+1;
                      rng(i,n)=rngo+velo*m+0.5*acco*m^2+(1/6)*A(j)*m^3;
                      vel(i,n)=velo + acco*m + 0.5*A(j)*m^2;
                      acc(i,n)=acc(i,n-1) + A(j);
                   end
                   rngo=rng(i,n);
                   velo=vel(i,n);
                   acco=acc(i,n);
               end
               total=total + T1;
               if total >= duration+5,done=1;end
            end
         end,
         sa=rng(1,1:duration) + rng(2,1:duration);
         sadot=vel(1,1:duration) + vel(2,1:duration);
         saddot=acc(1,1:duration) + acc(2,1:duration);
         if model == 4,
            delta(:,k)=sa';
         else
            delta(:,3*k - 2)=sa';
            delta(:,3*k - 1)=sadot';
            delta(:,3*k)=saddot';
         end
      end,
   end
